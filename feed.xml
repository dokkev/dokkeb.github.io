<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://dokkev.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://dokkev.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-15T18:20:25+00:00</updated><id>https://dokkev.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">[Robotic Hand] - PLATO HAND V2</title><link href="https://dokkev.github.io/plato_v2/" rel="alternate" type="text/html" title="[Robotic Hand] - PLATO HAND V2"/><published>2024-11-04T00:00:00+00:00</published><updated>2024-11-04T00:00:00+00:00</updated><id>https://dokkev.github.io/plato</id><content type="html" xml:base="https://dokkev.github.io/plato_v2/"><![CDATA[<p>This is a collaborative project between <a href="https://www.utexas.edu/">The University of Texas at Austin</a> and <a href="https://www.sony.net/">Sony Group Corporation</a>.</p> <h2 id="introduction">Introduction</h2> <p>The Sony PLATO project at UT Austin focuses on developing remote telemanipulation interfaces and framkeworks to grasp and manipulate tools in the human enviroments. Using the <a href="https://reneu.robotics.utexas.edu/maestro-hand-exoskeleton-0">Maestro Hand Exokeleton</a>, we can estimate the joint angles of the human hand provide force feedback via bowden cables and series elastic actuators. We developed a 3 fingered robotic hand HT2205 motors, ESP32 microcontroller, SimpleFOC Mini, and CAN bus based on our <a href="/motorcan/">SocketCAN Motor Control</a>.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/p1_cad-480.webp 480w,/assets/img/plato/p1_cad-800.webp 800w,/assets/img/plato/p1_cad-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/p1_cad.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="p1_cad" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/p1_p-480.webp 480w,/assets/img/plato/p1_p-800.webp 800w,/assets/img/plato/p1_p-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/p1_p.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="p1_3dprint" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/p1_optimo-480.webp 480w,/assets/img/plato/p1_optimo-800.webp 800w,/assets/img/plato/p1_optimo-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/p1_optimo.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="p1_attached" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Left: 3D CAD Model of the PLATO Hand Middle: 3D Printed Prototype Right: Final Prototype </div> <p>Due to time limit, we didn’t implement PCB board, so we used wires to connect all electrical components. Detail design of the PLATO Hand will be posted in the future. We adopted collocated direct driven motor to achieve proximal actuation with high force transprancey and high bandwidth control. While MCP joints (A/A and F/E) are direct driven, PIP joint (F/E) includes a cable transmission with 1:1 ratio. One of the unique feature of the hand is that fingertip matierals are made of soft resin while the fingernail made of hard resin is connected to 6-dof miniature force-torque sensors.</p> <p>The low-level hardware interface for the PLATO Hand was implemented using <a href="https://control.ros.org/iron/index.html"><code class="language-plaintext highlighter-rouge">ros2_control</code></a> which allows seamless integration of the hardware to ROS 2 framework.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/p1_teleop-480.webp 480w,/assets/img/plato/p1_teleop-800.webp 800w,/assets/img/plato/p1_teleop-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/p1_teleop.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="p1_teleop" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/p1_jenga-480.webp 480w,/assets/img/plato/p1_jenga-800.webp 800w,/assets/img/plato/p1_jenga-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/p1_jenga.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="p1_jenga" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Teleoperation of PLATO Hand to Manipulate a Jenga Piece with Maestro Hand Exoskeleton </div> <p>We made a first prototype of the PLATO hand with <a href="https://roboligent.com/">Roboligent</a>. Then we teleoperated the PLATO hand and Optimo arm with the Maestro Hand Exoskeleton and 3D SpaceMouse. As a conclusion, we verified our teleoperation pipeline, we found several problems to address:</p> <ul> <li> <p>Limitied Torque Output: The HT2205 motor’s rated torque according to the datasheet is 0.04 Nm which is enough to grab a light object such as a jenga block. However, it turns out that the actual torque output was much lower (about 10 times) than 0.04 Nm.</p> </li> <li> <p>Overheating: Due to the motor’s low rated torque, the motor pulled a lot of current to achieve the desired motion. This caused the motor to overheat and damaging the wires and some electrical compoenets glued to the base frame of the hand.</p> </li> <li> <p>Latency: With the SocketCAN and the USB-CAN Converter, we experienced a lot of latency in communication. Although the PLATO Hand is running on real-time kernel, USB is not supported in real-time because of its packed oriented nature. In addtion, since one ESP32 controls three motors, there may have been latency in motor control algorithm.</p> </li> <li> <p>Control : We only received the current motor position from the CAN bus, and the motor velocity was computed on the host computer. With the latnecy mentioned above, the velocity reading contaied a lot of noise leading to instability in impedance control. Therefore, we ended up implementing PD control loop inside the ESP32 embedded system.</p> </li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/p1_finger-480.webp 480w,/assets/img/plato/p1_finger-800.webp 800w,/assets/img/plato/p1_finger-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/p1_finger.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="p1_finger" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Collocated Motors of PLATO Hand </div> <ul> <li>Range of Motion: Due to the collocated motor design, there’s limited A/A (Yaw rotation) and thumb opposition (Roll rotation) range motion.</li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/p1_stack-480.webp 480w,/assets/img/plato/p1_stack-800.webp 800w,/assets/img/plato/p1_stack-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/p1_stack.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="p1_finger" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/p1_wiring-480.webp 480w,/assets/img/plato/p1_wiring-800.webp 800w,/assets/img/plato/p1_wiring-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/p1_wiring.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="p1_wiring" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Wiring of PLATO Hand </div> <ul> <li>Wiring: Each motor has a total of 9 wires (3 phases + 6 SPI (including power)) With 9 motors and 3 voltage converters, and 3 ESP32 stacks (ESP32 + CAN Transceiver + SimpleFOC Mini). There are a lot of wires packed inside the hand case making it to challenge to diagnose hardware issues.</li> </ul> <p>To address these problems, we have designed PLATO Hand V2 (PLATO2 Hand) with off-the-shelf quasi-direct drive actuator with on-board motor driver to increase the load capacity, decrease the control instability, and add more versatility in motion by greater range of motion to safetly achieve the desired task in the human enviroment.</p> <h2 id="design-1---actuator">Design (1) - Actuator</h2> <p>Actuators are the cornerstone of robotic design, particularly when utilizing off-the-shelf motors. While custom actuators offer greater design flexibility, their development is a time-consuming and costly endeavor, especially for robotic hand applications. These actuators must be compact, lightweight, and powerful—a challenging combination considering that motor torque is proportional to both power and mechanical reduction ratio. Miniaturizing such designs proves difficult as high power ratings and reduction ratios require significant space and weight.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/proprio-480.webp 480w,/assets/img/plato/proprio-800.webp 800w,/assets/img/plato/proprio-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/proprio.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="fig1" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Three different electromagnetic (EM) actuator concepts. (a) High-ratio geared motor with torque sensor, (b) Series elastic actuator, (c) Proprioceptive force control actuator [1] </div> <p>Torque density, a metric that evaluates an actuator’s mass (kg) relative to its power (W), offers a valuable perspective on actuator performance. Wensing’s work on proprioceptive actuator design for the Patrick Wensing’s <a href="https://fab.cba.mit.edu/classes/865.18/motion/papers/mit-cheetah-actuator.pdf">Proprioceptive Actuator Design in MIT Cheetah</a> [1] highlights key principles for legged robots, including reducing ground reaction forces, improving impact mitigation (backdrivability), increasing force transparency, and achieving high-bandwidth force control. Although robotic hand design may have less stringent requirements compared to legged robots, adopting these design principles can enable robotic hands to perform more versatile tasks beyond simple pick-and-place or in-hand manipulation of small, lightweight objects.</p> <p>High control bandwidth, transparency, and backdrivability can be achieved by employing a low reduction ratio, typically under 10, in a configuration known as a quasi-direct drive (QDD) actuator. The low gear ratio reduces the reflected rotor inertia, which improves control bandwidth, while the reduced friction enhances transparency and backdrivability. Among the off-the-shelf QDDs, <a href="https://steadywin.cn/en/pd.jsp?id=130#_jcp=3_3">GIM3505-8</a> stands out as the most compact one with a 8:1 gear ratio with a rated torque of 0.43 Nm, and dimensions of 43 mm D x 30 mm H In addition, it provides integrated motor driver module with CAN bus communication. Because of these features, we have selected the GIM3505-8 for MCP and PIP joint actuators for PLATO2 Hand.</p> <h2 id="design-2---finger-transmission">Design (2) - Finger Transmission</h2> <p>Robotic finger modeling often assumes that the finger is an open-chain mechanism, with each joint capable of producing torque independently. However, placing an actuator at every joint is not a practical design choice due to its weight, bulkiness and resulting inertia during motion. Robot design often locates heavy and bulky actuators near the base (body) of the robot to achieve proximal actuation [2] and reduce the inertia of the distal links, and we have adopted same design principle for the finger of PLATO2 Hand.</p> <p>Among various transmission options, cable-driven mechanisms offer the highest transparency and minimal backlash [3], making them a popular choice for robotic hand designs. The flexibility of cables allows for efficient power transmission over long and curved paths, enabling more compact and anatomically accurate hand configurations by placing actuators near the wrist or forearm of the robotic hand. However, cable-driven mechanism require careful design to ensure proper tensioning, alignment, and termination of cables. In our application where frequent maintenance will be required due to tasks involving high-speed collision with the environment.</p> <p>Based on the requirements for collision resilience and durability, we have opted for a linkage transmission mechanism in our robotic hand design. While linkage mechanisms introduce complexities in kinematics, such as potential non-linearity in mechanical advantage and limited range of motion due to transmission angle and singularity, these challenges can be effectively addressed through careful design. One approach to mitigate the non-linear reduction issue is to employ a parallelogram-style four-bar linkage, where the input and output linkages are parallel to each other. This configuration results in simplified kinematics, as the mechanical advantage remains constant throughout the range of motion. Since we will be estimating the joint angles based on the motor encoder readings without employing additional sensors on the distal joints, simplifying the kinematics is crucial for PLATO2 Hand for accurate state estimation.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/p2_collocated-480.webp 480w,/assets/img/plato/p2_collocated-800.webp 800w,/assets/img/plato/p2_collocated-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/p2_collocated.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="fig1" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Collocating GIM3505-8 motors for PLATO2 Hand Compared to PLATO Hand </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/2_4bar-480.webp 480w,/assets/img/plato/2_4bar-800.webp 800w,/assets/img/plato/2_4bar-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/2_4bar.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="double_four_bar" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Double Four-Bar Linkage Mechanism </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/human-480.webp 480w,/assets/img/plato/human-800.webp 800w,/assets/img/plato/human-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/human.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="human_hand_anatomy" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Human Hand Anatomy: we use MCP and PIP joint for the PLATO2 Hand </div> <p>Due to the increased thickness of the actuators and the requirement for co-axial rotational output to maintain linearity in the linkage kinematics, collocating two motors, as in the previous PLATO Hand design, is not a viable option for the PLATO2 Hand. To address this challenge, we introduced an additional linkage transmission for the metacarpophalangeal (MCP) motor to drive the proximal interphalangeal (PIP) motor, which is directly connected to the proximal phalanx and drives the PIP joint through a four-bar linkage. However, this design presented limited range of motion in flexion/extension (F/E) due to the restricted space available for the two four-bar linkages. The range of motion was further constrained by mechanical interference and tight clearances between the independent linkages and the large diameter of the actuators. Increasing the size of the linkages to accommodate a larger range of motion would result in an undesirably bulky design.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/2_4bar_hand-480.webp 480w,/assets/img/plato/2_4bar_hand-800.webp 800w,/assets/img/plato/2_4bar_hand-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/2_4bar_hand.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="hand-cad" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 3D CAD Model of PLATO2 Hand with Double Four-Bar Linkages </div> <p>Range of motion of linkages were limited by the mechanical interference and tight clearances between the two independant linkages and actuator’s large diameter. Increasing the size of the linkages would increase the size of the fingers making the hand bulkier. As a resolution, we have decided to change to adopt five-bar linkage mechanism and convert to a finger design with 2 active actuation.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/classic_5bar-480.webp 480w,/assets/img/plato/classic_5bar-800.webp 800w,/assets/img/plato/classic_5bar-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/classic_5bar.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="hand-cad" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/5bar-diagram-480.webp 480w,/assets/img/plato/5bar-diagram-800.webp 800w,/assets/img/plato/5bar-diagram-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/5bar-diagram.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="hand-cad" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Left: Classic Parallel Five-Bar Linkage Right: PLATO2 Five-Bar Linkage Finger </div> <p>As an alternative, we explored the use of a five-bar linkage mechanism, which is commonly employed in parallel manipulators and has been used in robotic fingers with underactuated mechanisms, springs, and finger exoskeletons. The five-bar linkage reduces the number of linkages and space requirements compared to the double four-bar linkage design. However, this simplification comes at the cost of increased complexity in the kinematics. In a five-bar linkage, the PIP joint angle is determined by both the MCP and PIP motors, resulting in a non-linear mechanical advantage. To address this non-linearity, we modeled the mechanism and ran optimization to minimize the deviation from a linear mechanical advantage.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/reduction-480.webp 480w,/assets/img/plato/reduction-800.webp 800w,/assets/img/plato/reduction-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/reduction.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="joint angles over motor angles" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> PIP Joint Angle over MCP and PIP Motor Angles </div> <h2 id="design-3---degrees-of-freedom">Design (3) - Degrees of Freedom</h2> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/p1_dof-480.webp 480w,/assets/img/plato/p1_dof-800.webp 800w,/assets/img/plato/p1_dof-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/p1_dof.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="p1_dof" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/p2_dof-480.webp 480w,/assets/img/plato/p2_dof-800.webp 800w,/assets/img/plato/p2_dof-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/p2_dof.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="p2_dof" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> DOF Visualization of PLATO Hand (left) and PLATO2 Hand (right) </div> <p>To reduce the bulkiness of the PLATO2 Hand, we removed the metacarpophalangeal (MCP) adduction/abduction (A/A) motion, also known as yaw, for the index and middle fingers. This decision was based on the premise that the dexterity required for in-hand manipulation can be sufficiently achieved without the MCP A/A motion in these fingers, provided that the thumb is equipped with an additional yaw motion. By eliminating the MCP A/A motion, we significantly reduced the complexity and size of the actuation mechanism for the index and middle fingers, leading to a more compact overall design. Since compliance less matters for thumb Roll and Yaw motion, we decided to use Dynamixel XL430-W250-T for those joint actuation.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/p2_cad-480.webp 480w,/assets/img/plato/p2_cad-800.webp 800w,/assets/img/plato/p2_cad-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/p2_cad.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="p2_cad" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 3D CAD Model of PLATO2 Hand </div> <h2 id="control-1---hardware-interface-and-communication">Control (1) - Hardware Interface and Communication</h2> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/pcan-480.webp 480w,/assets/img/plato/pcan-800.webp 800w,/assets/img/plato/pcan-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/pcan.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="pcan_usb" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/pcan_pcie-480.webp 480w,/assets/img/plato/pcan_pcie-800.webp 800w,/assets/img/plato/pcan_pcie-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/pcan_pcie.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="pcan_pcie" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 3D CAD Model of PLATO2 Hand </div> <p>We have changed our CAN device to PCAN devices to increase the performance of the real-time control loop of the PLATO2 Hand. We are testing the PCAN-USB FD and PCAN-PCIe FD devices. Although the USB-CAN adapter only supports a single CAN channel and is limited by the polling rate of the USB interface, it provides a easy-to-use interface for debugging and testing. And surprisingly, we were able to achieve real time impedance control at 500 Hz with PCAN-USB FD. Due to the single bus limit, the control loop was limited to 500 Hz maximum. However, the PCAN-PCIe FD device supports up to 4 CAN channels and can achieve 1 kHz control loop and allocate CAN bus for other sensors such as force-torque sensors and tactile sensors in the future.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/hardware_interface-480.webp 480w,/assets/img/plato/hardware_interface-800.webp 800w,/assets/img/plato/hardware_interface-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/hardware_interface.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="hardware_interface" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Hardware Interface Code Structure </div> <p>We have implemented the hardware interface for the PLATO2 Hand using the <a href="https://control.ros.org/iron/index.html"><code class="language-plaintext highlighter-rouge">ros2_control</code></a> framework. The hardware interface is responsible for reading the joint states (position, velocity, and effort) from the hardware and sending the joint commands to the hardware. ros2_control hardware interface brings the impedance controller and updates joint states and commands to the hand object which converts the joint states/commands to motor states/commands using five-bar linkage kinematics and motor position offsets and direction. Hand has 8 instances of actuator objects which have shared memory access to the PCAN interface to read and write CAN messages based on the given CAN protocol.</p> <h2 id="control-2---impedance-control">Control (2) - Impedance Control</h2> <p>Since the hardware interfaces handle kinematic calculation and control of five-bar linkages. High level controller can assume that the fingers are open-chained without kinematic constraints.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/plato/control-480.webp 480w,/assets/img/plato/control-800.webp 800w,/assets/img/plato/control-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/plato/control.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="imp_control" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Joint Impedance Control Over CAN Bus </div> \[\tau = M(q)\ddot{q} + D(\dot{q}_{d} - \dot{q}) + K(q_{d} - q) + g(q)\] <p>Mass matrix term, bias term, and gravity term are calculated using <a href="https://github.com/stack-of-tasks/pinocchio">pinocchio</a> library, and these terms are fed as feed-forward torque. Stiffness K and damping D are determined by the joint PD cotnrol gains to achieve the desired impedance.</p> <p><a href="http://www.youtube.com/watch?v=0_8NTsrWEng"><img src="http://img.youtube.com/vi/0_8NTsrWEng/0.jpg" alt="Video"/></a></p> <div class="caption"> PLATO2 Hand Impedance Control Low Impedance vs High Impedance </div> <h2 id="control-3---grasping">Control (3) - Grasping</h2> <p>Using the pre-defined joint position (open/close) and impedance control, we can achieve various grasping strategies.</p> <p><a href="http://www.youtube.com/shorts/i-96pep6AY8"><img src="/assets/img/plato/jenga.jpg" alt="Video"/></a></p> <div class="caption"> Manual Driving of the Optimo Arm </div> <p><a href="http://www.youtube.com/shorts/_M8Q1qfKum0"><img src="/assets/img/plato/dumbbell.jpg" alt="Video"/></a></p> <div class="caption"> Full Grasping a dumbbell </div> <p><a href="http://www.youtube.com/watch?v=wdwf4DpCva8"><img src="http://img.youtube.com/vi/wdwf4DpCva8/0.jpg" alt="Video"/></a></p> <div class="caption"> Grasping via Keyboard Teleoperation </div> <p>[1] Wensing, P.M., Wang, A., Seok, S., Otten, D.M., Lang, J.H., &amp; Kim, S. (2017). Proprioceptive Actuator Design in the MIT Cheetah: Impact Mitigation and High-Bandwidth Physical Interaction for Dynamic Legged Robots. IEEE Transactions on Robotics, 33, 509-522.</p> <p>[2] Bang, S.H., Gonzalez, C., Ahn, J., Paine, N., &amp; Sentis, L. (2023). Control and evaluation of a humanoid robot with rolling contact joints on its lower body. Frontiers in Robotics and AI, 10.</p> <p>[3] Hwangbo, J., Tsounis, V., Kolvenbach, H., &amp; Hutter, M. (2018). Cable-Driven Actuation for Highly Dynamic Robotic Systems. 2018 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), 8543-8550.</p>]]></content><author><name></name></author><category term="Hardware Development"/><category term="Robotic Manipulation"/><summary type="html"><![CDATA[Design and Control of a 8-DoF Proprioceptive Robotic Hand]]></summary></entry><entry><title type="html">Resources for Learning Robotics</title><link href="https://dokkev.github.io/Intro-to-Robotics/" rel="alternate" type="text/html" title="Resources for Learning Robotics"/><published>2024-04-12T00:00:00+00:00</published><updated>2024-04-12T00:00:00+00:00</updated><id>https://dokkev.github.io/Intro-to-Robotics</id><content type="html" xml:base="https://dokkev.github.io/Intro-to-Robotics/"><![CDATA[<p>Robotics research requires multidisciplinary knowledge in mathematics, mechanical engineering, electrical engineering, computer engineering, and computer science. This post provides a collection of resources for learning robotics for beginners.</p> <h2 id="fundamental-robotics-knowledge">Fundamental Robotics Knowledge</h2> <h3 id="robot-configuration">Robot Configuration</h3> <ul> <li><a href="https://www.youtube.com/watch?v=zjMuIxRvygQ&amp;t=33s">Quaternions and Rotation in 3D Space, explained interactively</a></li> <li><a href="https://www.youtube.com/watch?v=d4EgbgTm0Bg&amp;t=469s">Visualizing quaternions (4d numbers) with stereographic projection</a></li> <li><a href="https://www.youtube.com/watch?v=zc8b2Jo7mno">Explaining Gibmal Lock</a></li> <li><a href="https://www.youtube.com/watch?v=FyLNR3edOds&amp;list=PLggLP4f-rq02vX0OQQ5vrCxbJrzamYDfx&amp;index=6">Configuration Space</a></li> <li><a href="https://www.youtube.com/watch?v=hTuW51CpUg4&amp;list=PLggLP4f-rq02vX0OQQ5vrCxbJrzamYDfx&amp;index=9">Task Space and Workspace</a></li> <li><a href="https://www.youtube.com/watch?v=mvGZtO_ruj0&amp;list=PLggLP4f-rq02vX0OQQ5vrCxbJrzamYDfx&amp;index=17">Twist</a></li> <li><a href="https://www.youtube.com/watch?v=0wsYPJPGtKE&amp;list=PLggLP4f-rq02vX0OQQ5vrCxbJrzamYDfx&amp;index=20">Wrenches</a></li> </ul> <h3 id="coordinate-transformation">Coordinate Transformation</h3> <ul> <li><a href="https://www.youtube.com/watch?v=lVjFhNv2N8o">Robotics 1 U1 (Kinematics) S3 (Rotation Matrices) P1 (Rotation Matrices)</a></li> <li><a href="https://www.youtube.com/watch?v=H_94DTWd8ck">2D Coordinate Transformation</a></li> <li><a href="https://www.youtube.com/watch?v=rHLEWRxRGiM">3D Coordinate Transformation</a></li> </ul> <h3 id="jacobian-and-kinematics">Jacobian and Kinematics</h3> <ul> <li><a href="https://www.youtube.com/watch?v=bohL918kXQk">Jacobian Matrix</a></li> <li><a href="https://www.youtube.com/watch?v=hhFzJvaY__U&amp;t=510s">Change of Variables and the Jacobian</a></li> <li><a href="https://www.youtube.com/watch?v=vCEWORZbD3Y&amp;t=55s">Robot Singularities</a></li> <li><a href="https://www.youtube.com/watch?v=vjJgTvnQpBs&amp;t=93s">Singularities</a></li> <li><a href="https://www.youtube.com/watch?v=wgpgNLEEpeY">2D Inverse Kinematics with Graphic Visualization</a></li> <li><a href="https://www.youtube.com/watch?v=VhUA0jf7tI8">Numerical Inverse Kinematics (1)</a></li> <li><a href="https://www.youtube.com/watch?v=24cXvgQl-nk">Numerical Inverse Kinematics (2)</a></li> <li><a href="https://www.youtube.com/watch?v=eQ9E0Zvp9jw&amp;t=198s">Odometery</a></li> </ul> <h3 id="motion-planning">Motion Planning</h3> <ul> <li><a href="https://www.youtube.com/watch?v=Ob3BIJkQJEw">RRT</a></li> <li><a href="https://www.youtube.com/watch?v=s2qrMwqm4D0&amp;list=PLggLP4f-rq02vX0OQQ5vrCxbJrzamYDfx&amp;index=51">Motion Planning in C-Space</a></li> <li><a href="https://msl.cs.illinois.edu/~lavalle/papers/Lav11b.pdf">Motion Planning Tutorial</a></li> </ul> <h3 id="euler-lagrangian-dynamics">Euler-Lagrangian Dynamics</h3> <ul> <li><a href="http://www.aoengr.com/Dynamics/LagrangianMechanicsPendulum.pdf">Simple Pendulum via Lagrangian Mechanics</a></li> <li><a href="https://www.youtube.com/watch?v=1U6y_68CjeY">Lagrangian Formulation of Robot Dynamics</a></li> <li><a href="https://www.youtube.com/watch?v=ZASVKAlegfQ">Inverse Dynamics</a></li> </ul> <h3 id="machine-learning">Machine Learning</h3> <ul> <li><a href="https://www.youtube.com/watch?v=yMgFHbjbAW8">Residual and Least Squares Regression</a></li> <li><a href="https://www.youtube.com/watch?v=aircAruvnKk&amp;list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi">Neural Network</a></li> <li><a href="https://www.youtube.com/watch?v=EKbFIWANwHw">Gradient Descent</a></li> <li><a href="https://www.youtube.com/watch?v=IHZwWFHWa-w&amp;list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi&amp;index=2">Graident Descent in Deep Learning</a></li> <li><a href="https://www.youtube.com/watch?v=oJNHXPs0XDk">Neural Network Architectures</a></li> <li><a href="https://www.youtube.com/watch?v=Ilg3gGewQ5U&amp;list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi&amp;index=3">Backpropagation</a></li> <li><a href="https://www.youtube.com/watch?v=wjZofJX0v4M&amp;list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi&amp;index=5">Transformer (1)</a></li> <li><a href="https://www.youtube.com/watch?v=eMlx5fFNoYc&amp;list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi&amp;index=6">Transformer (2)</a></li> </ul> <hr/> <h2 id="robot-operating-system-ros">Robot Operating System (ROS)</h2> <h3 id="basics-of-ros-2">Basics of ROS 2</h3> <ul> <li><a href="https://docs.ros.org/en/iron/index.html">ROS 2 Documentation</a></li> <li><a href="https://docs.ros.org/en/iron/Tutorials.html">Official ROS 2 Tutorials</a></li> <li><a href="https://articulatedrobotics.xyz/page4/">ROS 2 Tutorials</a> by <a href="https://www.youtube.com/@ArticulatedRobotics">Articulated Robotics</a></li> <li><a href="https://industrial-training-master.readthedocs.io/en/melodic/_source/session3/Intro-to-URDF.html">URDF</a></li> </ul> <h3 id="navigation">Navigation</h3> <ul> <li><a href="https://navigation.ros.org/">Nav2 ROS 2 Package</a></li> <li><a href="https://emanual.robotis.com/docs/en/platform/turtlebot3/navigation/">TurtleBot 3 Navigation</a></li> </ul> <h3 id="motion-planning-1">Motion Planning</h3> <ul> <li><a href="https://moveit.picknik.ai/main/index.html">Moveit 2</a></li> </ul> <hr/> <p>Online Courses</p> <h2 id="mathematics">Mathematics</h2> <h3 id="linear-algebra">Linear Algebra</h3> <ul> <li><a href="https://ocw.mit.edu/courses/18-06-linear-algebra-spring-2010/">Linear Algebra</a> by Gilbert Strang at MIT</li> <li><a href="https://www.3blue1brown.com/topics/linear-algebra">Essence of Linear Algebra</a> by Grant Sanderson (<a href="https://www.youtube.com/@3blue1brown">3Blue1Brown</a>)</li> <li><a href="https://www.khanacademy.org/math/linear-algebra">Linear Algebra</a> by Khan Academy</li> </ul> <h3 id="differential-equation">Differential Equation</h3> <ul> <li><a href="https://www.khanacademy.org/math/differential-equations">Differential Equation</a>by Khan Academy</li> </ul> <h3 id="probability">Probability</h3> <ul> <li><a href="https://www.youtube.com/playlist?list=PL2SOU6wwxB0uwwH80KTQ6ht66KWxbzTIo">Statistics 110: Probability</a> by Joe Blitzstein at Harvard University</li> </ul> <hr/> <h2 id="robot-mechanics-and-control">Robot Mechanics and Control</h2> <h3 id="robotic-manipulation">Robotic Manipulation</h3> <ul> <li><a href="https://modernrobotics.northwestern.edu/nu-gm-book-resource/foundations-of-robot-motion/">Modern Robotics</a> by Kevin Lynch at Northwestern University</li> <li><a href="https://manipulation.csail.mit.edu/index.html">Robotic Manipulation</a> by Russ Tedrake at MIT</li> </ul> <h3 id="optimal-control">Optimal Control</h3> <ul> <li><a href="https://underactuated.mit.edu/index.html">Underacutated Robotics</a> by Russ Tedrake at MIT</li> <li><a href="https://web.stanford.edu/class/ee364a/">Convex Optimization</a> by Stephen Boyd at Stanford University</li> <li><a href="https://www.youtube.com/watch?v=Kj88Nory8ec&amp;list=PLZnJoM76RM6Jv4f7E7RnzW4rijTUTPI4u">Optimal Control</a> by Zachery Manchester at CMU</li> </ul> <hr/> <h2 id="robot-perception-and-navigation">Robot Perception and Navigation</h2> <h3 id="computer-vision">Computer Vision</h3> <ul> <li><a href="https://www.youtube.com/playlist?list=PLzWRmD0Vi2KVsrCqA4VnztE4t71KnTnP5">Modern Computer Vision</a> at UC Berkeley <h3 id="slam">SLAM</h3> </li> <li><a href="https://www.youtube.com/watch?v=U6vr3iNrwRA&amp;list=PLgnQpQtFTOGQrZ4O5QzbIHgl3b1JHimN_&amp;index=1">Robot Mapping</a> by Cyrill Stachniss at University of Bonn</li> </ul> <hr/> <h2 id="embedded-system">Embedded System</h2> <ul> <li><a href="https://users.ece.utexas.edu/~valvano/Volume1/">Intro to Embedded Systems</a> by Jonathan Valvano at UT Austin <ul> <li><a href="https://www.edx.org/learn/embedded-systems/the-university-of-texas-at-austin-embedded-systems-shape-the-world-microcontroller-input-output">edX</a></li> </ul> </li> </ul>]]></content><author><name></name></author><category term="robotics"/><summary type="html"><![CDATA[Collection of useful resources for learning robotics.]]></summary></entry><entry><title type="html">[CAN 04] - Gripper Motor Control with CAN Bus</title><link href="https://dokkev.github.io/motorcan/" rel="alternate" type="text/html" title="[CAN 04] - Gripper Motor Control with CAN Bus"/><published>2023-12-05T00:00:00+00:00</published><updated>2023-12-05T00:00:00+00:00</updated><id>https://dokkev.github.io/motorcan</id><content type="html" xml:base="https://dokkev.github.io/motorcan/"><![CDATA[<p><strong>Code: [<a href="https://github.com/dokkev/MotorControl-CAN/blob/main/can_motor_control/can_motor_control.ino">GitHub</a>]</strong></p> <p>Previous Posts:</p> <ul> <li><a href="/aboutcan/">What is CAN?</a></li> <li><a href="/socketcan/">Setting up SocketCAN on Linux</a></li> <li><a href="/esp32can/">SocketCAN Communication with ESP32</a></li> </ul> <p><a href="http://www.youtube.com/watch?v=MmSt8G7N8ik"><img src="http://img.youtube.com/vi/MmSt8G7N8ik/0.jpg" alt="Video"/></a></p> <div class="caption"> Optimo Manipulator Pusing and Grabbing a Jenga Block </div> <p>In the previous posts, we have achieved communicating setting up SocketCAN on Ubuntu and communicating with ESP32. In this post, we will control 1-DOF roboric girpper with ESP32 and SocketCAN using <a href="https://simplefoc.com/">SimpleFOC</a> Arduino library.</p> <p>This is a collaborative work <a href="https://roboligent.com/">Roboligent</a> with their robot manipulator, Optimo.</p> <h2 id="hardware">Hardware</h2> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/optimo-480.webp 480w,/assets/img/can/optimo-800.webp 800w,/assets/img/can/optimo-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/optimo.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="optimo" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/gripper-480.webp 480w,/assets/img/can/gripper-800.webp 800w,/assets/img/can/gripper-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/gripper.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="gripper" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Left: Optimo Arm Right: 1-DOF Robotic Gripper </div> <ul> <li><a href="https://docs.simplefoc.com/simplefocmini">SimpleFOC Mini</a></li> <li><a href="https://www.aliexpress.com/i/2251832870920974.html?gatewayAdapt=4itemAdapt">HT2205 with AS5048A Encoder</a> Onlly used for testing not for the gripper</li> <li><a href="https://www.amazon.com/Comimark-Transceiver-TJA1050-Controller-Schnittstelle/dp/B07W4VZ2F2">TJA1050 CAN Transceiver</a></li> <li><a href="https://a.co/d/8sRDkUT">ESP32 Dev Board</a></li> <li><a href="https://makerbase3d.com/product/makerbase-canable-v2/?srsltid=AfmBOoo8SgfMBKoPkINomkXkyG8g6XlvwngQso5DAq0qLKPFEoTqkcba">Makerbase CANable 2.0 USB to CAN adapter</a></li> </ul> <h2 id="wiring">Wiring</h2> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/motor_wire-480.webp 480w,/assets/img/can/motor_wire-800.webp 800w,/assets/img/can/motor_wire-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/motor_wire.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="motor-wiring" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Wiring Diagram for Motor Control </div> <ul> <li> <p>The wiring for ESP32 and CAN Transceiver is same as the <a href="/esp32can/">previous post</a>. Some TJA1050 CAN Transceiver modules and USB-CAN deviuces include internal 120 ohm termination resistor. If you are unsure, measure the resistance between CAN-H and CAN-L wires to ensure it’s reading 60 ohm.</p> </li> <li> <p>Connect the BLDC motor’s u, v, w phases to the SimpleFOC Mini boards’ M1, M2, and M3 pins. The phase order does matter. If they are in a wrong order, the motor will not commmutate properly or run in the opposite direction. SimpleFOC Mini board will need a separate power supply. I will be providing 12 V to control HT2205 motor.</p> </li> <li> <p>Connect IN1, IN2, IN3, and EN pins to ESP32 GPIO pins while GND connects to the ground of ESP32.</p> </li> <li> <p>Supply 5V to SPI encoder and connect the SPI pins to ESP32. Most ESP32 have pre-assigned default SPI pins, but these pin assignment can be different depending on the board. You can check the default SPI pinout of your ESP32 board from the following code:</p> </li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void setup() {
  
  Serial.begin(115200);
  Serial.print("MOSI: ");
  Serial.println(MOSI);
  Serial.print("MISO: ");
  Serial.println(MISO);
  Serial.print("SCK: ");
  Serial.println(SCK);
  Serial.print("SS: ");
  Serial.println(SS);  
}

void loop() {
}
</code></pre></div></div> <ul> <li> <p>Make sure that there is a proper airgap between the motor magnet and the encoder if you are using magnetic encoder. The recommended airgap is usually specified in the encoder datasheet. The typical airgap for AS5048a is 1 mm airgap, but it depends on how the strength of the magnet. Improper airgap can cause noise in the signal and faulty readings.</p> </li> <li> <p>If you are trying to configue multiple SPI encoders with a shared bus (same MOSI, MISO, SCLK) but differnt chip select pins (CS), the physical wire lengths significantly affect the signal integrity. The longer the wire, the more the signal degrades. From my exerience, 3 SPI devices on the same bus with 80 MHz CLK had a maximum of 10 cm wire length. If you are using a longer wire, you may need to reduce the SPI CLK frequency. If you are 2 SPI devices, I recommend separating the SPI bus since ESP32 provides 2 SPI interfaces. You can more information <a href="https://randomnerdtutorials.com/esp32-spi-communication-arduino/">here</a>.</p> </li> <li> <h2 id="flashing-the-arduino-code">Flashing the Arduino Code</h2> </li> </ul> <p>Make sure to install <a href="https://docs.simplefoc.com/installation">SimpleFOC</a> and <a href="https://github.com/sandeepmistry/arduino-CAN">Arduio-CAN</a> libraries for Arduino IDE.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/diagram-480.webp 480w,/assets/img/can/diagram-800.webp 800w,/assets/img/can/diagram-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/diagram.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="comm-diagram" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Communication Diagram for Motor Control </div> <p>The host computer will send the desired torque command in <code class="language-plaintext highlighter-rouge">double</code> format to the ESP32 via CAN bus. The ESP32 will receive the torque command and send the current motor position in <code class="language-plaintext highlighter-rouge">double</code> back to the host computer.</p> <p>Since the CAN data can hold up to 8 bytes, we can directly encode the <code class="language-plaintext highlighter-rouge">double</code> data of torque command or motor position into the CAN data buffer with LSB order. Function such as <code class="language-plaintext highlighter-rouge">std::memcpy</code> for C++ or <code class="language-plaintext highlighter-rouge">memcpy</code> in Arduino will take care of packing the <code class="language-plaintext highlighter-rouge">double</code> data into the 1 x 8 byte buffer. However, make sure to check the endianness of the data to make sure the data is packed in LSB order.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void packDouble(double data, uint8_t *dataBuffer) {
    memcpy(dataBuffer, &amp;data, sizeof(double));
}
</code></pre></div></div> <p>Otherwise, we can directly allocate each byte of the <code class="language-plaintext highlighter-rouge">double</code> data into the CAN data buffer like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void packDouble(double data, uint8_t *dataBuffer) {
    uint64_t dataAsInt = *reinterpret_cast&lt;uint64_t*&gt;(&amp;data); // Reinterpret the double as a uint64_t
    dataBuffer[0] = (uint8_t)dataAsInt;
    dataBuffer[1] = (uint8_t)(dataAsInt &gt;&gt; 8);
    dataBuffer[2] = (uint8_t)(dataAsInt &gt;&gt; 16);
    dataBuffer[3] = (uint8_t)(dataAsInt &gt;&gt; 24);
    dataBuffer[4] = (uint8_t)(dataAsInt &gt;&gt; 32);
    dataBuffer[5] = (uint8_t)(dataAsInt &gt;&gt; 40);
    dataBuffer[6] = (uint8_t)(dataAsInt &gt;&gt; 48);
    dataBuffer[7] = (uint8_t)(dataAsInt &gt;&gt; 56);
}
</code></pre></div></div> <p>which is not clean but safe way to pack the data.</p> <p>When a command is recived from the host computer, the ESP32 will send command current to motor by converting the torque command to current command with pre-defiend torque constant and respond with the motor position to the host computer.</p> <p>We can implement a simple <a href="https://blog.mbedded.ninja/programming/operating-systems/linux/how-to-use-socketcan-with-c-in-linux/">C++ code to read and write over SocketCAN</a> to control the motor.</p> <p><a href="http://www.youtube.com/watch?v=8PiBqahbf7M"><img src="http://img.youtube.com/vi/8PiBqahbf7M/0.jpg" alt="Video"/></a></p> <div class="caption"> Motor Cotnrol with SocketCAN. In the video, I only sent float data in ESP32 and received the same float data back from ESP32 instead of double. In this case, the CAN data buffer is 4 bytes instead of 8 bytes. </div> <p>Now we can control the gripper motor using the same setup.</p> <p>Using the linear motion of the belt, we can achieve parallel gripper motion. The belt is connected to the motor shaft and the gripper jaws. When the motor rotates, the belt moves the jaws in the opposite direction.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/gripper_mech-480.webp 480w,/assets/img/can/gripper_mech-800.webp 800w,/assets/img/can/gripper_mech-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/gripper_mech.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="gripper_mech" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Mechanism for the Parallel Gripper with one motor </div> <p>We recorded the joint trajectories including the gripper motor to push the jenga piece and grab it by kinestheic teaching (manually driving the robot). We can use the recorded joint trajectories to replay the same motion.</p> <p><a href="http://www.youtube.com/watch?v=MmSt8G7N8ik"><img src="http://img.youtube.com/vi/MmSt8G7N8ik/0.jpg" alt="Video"/></a></p> <div class="caption"> Optimo Manipulator Pusing and Grabbing a Jenga Block </div>]]></content><author><name></name></author><category term="Hardware Development"/><category term="Robotic Manipulation"/><summary type="html"><![CDATA[Single Motor Control with ESP32, simpleFOC, and SocketCAN for Robotic Gripper]]></summary></entry><entry><title type="html">[CAN 03] - Communicating to ESP32 with SocketCAN</title><link href="https://dokkev.github.io/esp32can/" rel="alternate" type="text/html" title="[CAN 03] - Communicating to ESP32 with SocketCAN"/><published>2023-09-10T00:00:00+00:00</published><updated>2023-09-10T00:00:00+00:00</updated><id>https://dokkev.github.io/esp32can</id><content type="html" xml:base="https://dokkev.github.io/esp32can/"><![CDATA[<p>Previous Posts:</p> <ul> <li><a href="/aboutcan/">What is CAN?</a></li> <li><a href="/socketcan/">Setting up SocketCAN on Linux</a></li> </ul> <p><strong>Code: [<a href="https://github.com/dokkev/MotorControl-CAN/blob/main/CANSenderReceiver/CANSenderReceiver.ino">GitHub</a>]</strong></p> <h2 id="hardware">Hardware</h2> <p>I will be using USB-CAN adapter to connect my Ubuntu computer to ESP32 with TJA1050 CAN transceiver. Since <a href="https://docs.espressif.com/projects/esp-idf/en/release-v3.3/api-reference/peripherals/can.html">ESP32 already includes CAN controller</a>, we only need CAN transceiver. Note that not every microcontroller comes with CAN controller, so you may need to use external CAN controller like MCP2515.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/esp32-480.webp 480w,/assets/img/can/esp32-800.webp 800w,/assets/img/can/esp32-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/esp32.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="esp32" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/tja-480.webp 480w,/assets/img/can/tja-800.webp 800w,/assets/img/can/tja-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/tja.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="tja1050" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/usb-can-480.webp 480w,/assets/img/can/usb-can-800.webp 800w,/assets/img/can/usb-can-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/usb-can.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="usb-can" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Left: ESP32 Middle: TJA1050 Right: USB-CAN Adapter </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/wiring-480.webp 480w,/assets/img/can/wiring-800.webp 800w,/assets/img/can/wiring-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/wiring.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="wiring" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Wiring ESP32 to TJA1050 and USB-CAN Adapter </div> <h2 id="setting-up-your-esp32-with-can-transceiver">Setting up your ESP32 with CAN Transceiver</h2> <p>Supply 5V to the TJA1050 and connect the CANH and CANL to corresponding GPIO pins on ESP32. Any GPIO pins can be used as long as they have read and write capabilities. The default GPIO pins for CAN TX and RX on ESP32 are GPIO 16 (RX) and GPIO 17 (TX).</p> <p>I will be using Arduino IDE to program ESP32 with <a href="https://github.com/sandeepmistry/arduino-CAN">Arduino CAN library</a> which provides good high-level API for CAN communication.</p> <p>You can add ESP32 boards to Arduino IDE by following the instructions <a href="https://randomnerdtutorials.com/installing-the-esp32-board-in-arduino-ide-windows-instructions/">here</a>.</p> <blockquote> <p>IMPORTANT! Note that there is a <a href="https://github.com/sandeepmistry/arduino-CAN/issues/62">glitch that ESP32 cuts the baudrate in half</a>. If you want to set the baudrate to 500 kbps, you need to set it to 1000 kbps (1 Mbps) in the code like this: <code class="language-plaintext highlighter-rouge">CAN.begin(1000E3);</code></p> </blockquote> <p>If you want to resolve it add the following line to <code class="language-plaintext highlighter-rouge">ESP32SJA1000.cpp</code> in <code class="language-plaintext highlighter-rouge">CAN/src</code> in Arduino library at line <code class="language-plaintext highlighter-rouge">126</code></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>modifyRegister(REG_BTR1, 0x80, 0x80); // SAM = 1
writeRegister(REG_IER, 0xff); // enable all interrupts
modifyRegister(REG_IER, 0x10, 0); //brp_div will prescale BRP by 2. Only available on ESP32
Revision 2 or later. Reserved otherwise 
</code></pre></div></div> <p>Flash the code above to ESP32. If you get error message: <code class="language-plaintext highlighter-rouge">A fatal error occurred: Could not open /dev/ttyUSB0, the port doesn't exist Failed uploading: uploading error: exit status 2</code>, run the following command:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo adduser &lt;username&gt; dialout
sudo chmod a+rw /dev/ttyUSB0
</code></pre></div></div> <p>Change <code class="language-plaintext highlighter-rouge">&lt;username&gt;</code> to your username and <code class="language-plaintext highlighter-rouge">/dev/ttyUSB0</code> to your USB port.</p> <p>This code reads CAN messages and print them to the serial monitor. It also sends a CAN message with the data <code class="language-plaintext highlighter-rouge">hello</code> and RTR request every second.</p> <p>If the CAN transceiver is connected correctly, ESP32 will fail to send the CAN message and get stuck in <code class="language-plaintext highlighter-rouge">CAN.endPacket()</code> function.</p> <h2 id="reading-can-from-terminal">Reading CAN from Terminal</h2> <p>Set the CAN state to <code class="language-plaintext highlighter-rouge">UP</code> with a desired bitrate. Assuming you are using <code class="language-plaintext highlighter-rouge">candlelight</code> firmware, you can set the bitrate to 500 kbps by running:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo ip link set up can0 type can bitrate 500000
</code></pre></div></div> <p>Open a new terminal and run:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>candump can0
</code></pre></div></div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/read_hello-480.webp 480w,/assets/img/can/read_hello-800.webp 800w,/assets/img/can/read_hello-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/read_hello.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="read_hello" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Received CAN messages from ESP32 by `candump can0` </div> <p>The CAN message data is in the hexadecimal format. You can convert it using <a href="https://www.rapidtables.com/convert/number/hex-to-ascii.html">ASCII table</a></p> <p><code class="language-plaintext highlighter-rouge">68 65 6C 6C 6F =&gt; hello</code></p> <h2 id="writing-can-from-terminal">Writing CAN from Terminal</h2> <p>Now let’s send CAN messages to ESP32. Using th ASCII table, we can find the hexadecimal value of <code class="language-plaintext highlighter-rouge">hello</code> is <code class="language-plaintext highlighter-rouge">68 65 6C 6C 6F</code>. On the terminal, we can send the CAN message with desired ID and data with the following format: <code class="language-plaintext highlighter-rouge">cansend [options] &lt;interface&gt; &lt;CAN ID&gt;#&lt;data&gt;</code></p> <p>Run the following command on a terminal to send the “hello” CAN message with CAN ID 0x123 to ESP32:</p> <p>If you didn’t connect your CAN transceiver + ESP32 to the USB-CAN adapter correctly, the TX buffer will be full and the CAN message will not be sent.</p> <p>Upon sucessful connection, you will see the CAN messages received in the serial monitor of Arduino IDE.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cansend can0 123#68656C6C6F
</code></pre></div></div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/hello_esp-480.webp 480w,/assets/img/can/hello_esp-800.webp 800w,/assets/img/can/hello_esp-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/hello_esp.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="hello_esp" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Received CAN messages displayed in the serial monitor of Arduino IDE </div> <p>Now let’s try to send random CAN messages to ESP32</p> <p>Run the following command:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cangen can0
</code></pre></div></div> <p>This command will start generating random CAN messages continuously.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/cangen_esp-480.webp 480w,/assets/img/can/cangen_esp-800.webp 800w,/assets/img/can/cangen_esp-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/cangen_esp.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="cangen_esp" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Received CAN messages displayed in the serial monitor of Arduino IDE </div> <p>Messages are not encoded correctly because canReceiver() function converts the data to char using ASCII. You can modify the function to print the data in hexadecimal format. Instead of <code class="language-plaintext highlighter-rouge">Serial.print ((char) CAN.read());</code>, you can use <code class="language-plaintext highlighter-rouge">Serial.print (CAN.read(), HEX);</code> to print the data in hexadecimal format.</p>]]></content><author><name></name></author><category term="Hardware Development"/><summary type="html"><![CDATA[SocketCAN Communication with ESP32]]></summary></entry><entry><title type="html">[CAN 02] - Setting up SocketCAN on Linux</title><link href="https://dokkev.github.io/socketcan/" rel="alternate" type="text/html" title="[CAN 02] - Setting up SocketCAN on Linux"/><published>2023-09-02T00:00:00+00:00</published><updated>2023-09-02T00:00:00+00:00</updated><id>https://dokkev.github.io/socketcan</id><content type="html" xml:base="https://dokkev.github.io/socketcan/"><![CDATA[<p>Previous Post:</p> <ul> <li><a href="/aboutcan/">What is CAN?</a></li> </ul> <p>In the previous post, we discussed the basics of CAN bus and its applications in robotics. In this post, we will learn how to set up SocketCAN on Ubuntu computers to set up CAN communication.</p> <h2 id="hardware">Hardware</h2> <p>I have tested the following USB-CAN adapters with SocketCAN on Ubuntu 22.04 with 6.8.0-48-generic kerneal and 5.15.129-rt67 real-time kernel.</p> <ul> <li><a href="https://makerbase3d.com/product/makerbase-canable-v2/?srsltid=AfmBOoo8SgfMBKoPkINomkXkyG8g6XlvwngQso5DAq0qLKPFEoTqkcba">Makerbase CANable 2.0 USB to CAN adapter</a></li> <li><a href="https://www.amazon.com/dp/B07P9JGXXB?ref=ppx_yo2ov_dt_b_product_details&amp;th=1">USB CAN Converter Module</a></li> <li><a href="https://a.co/d/6rcsDxE">DSD TECH USB to CAN Adapter</a></li> <li><a href="https://www.peak-system.com/PCAN-USB-FD.365.0.html?&amp;L=1">PCAN-USB FD</a> - make sure to compile the driver with <code class="language-plaintext highlighter-rouge">netdev</code> option. The default is <code class="language-plaintext highlighter-rouge">chardev</code> which is not compatible with SocketCAN.</li> </ul> <h2 id="setting-up-socketcan">Setting up SocketCAN</h2> <p>Install <a href="https://github.com/linux-can/can-utils"><code class="language-plaintext highlighter-rouge">can-utils</code></a> by running:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install can-utils
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">can-utils</code> repository allows user to debug and test the CAN bus via terminal commands.</p> <p>Plug the USB-CAN device into the computer, and you can check the device by running:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lsusb 
</code></pre></div></div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/lsusb-480.webp 480w,/assets/img/can/lsusb-800.webp 800w,/assets/img/can/lsusb-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/lsusb.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="lsusb" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Output of `lsusb` command. You can see that I have two USB-CAN devices connected to my computer. </div> <p>Based on the what frimware in installed in our USB-CAN adapter, we may need to manually load your device. Since SocketCAN is network interface, we can use <code class="language-plaintext highlighter-rouge">ip</code> command to check the status of CAN bus if the firmware is <code class="language-plaintext highlighter-rouge">Candlelight</code> assuming it’s a <a href="https://canable.io/">CANable</a> device. Run the following command:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip link ls
</code></pre></div></div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/iplinkls-480.webp 480w,/assets/img/can/iplinkls-800.webp 800w,/assets/img/can/iplinkls-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/iplinkls.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="iplinkls" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Output of `ip link ls` command. You can see that my SockteCAN device `can0` is at `DOWN` state. Since my PCAN-USB FD driver is compiled with `chardev`, you won't see the PCAN device in the network interface. </div> <p>If you see your CAN bus like <code class="language-plaintext highlighter-rouge">can0</code>, follow the Option 1.</p> <p>If you don’t see your can bus like <code class="language-plaintext highlighter-rouge">can0</code>, you have to manually load it by <code class="language-plaintext highlighter-rouge">slcan</code> (CAN over serial line interfaces) by following the Option 2.</p> <h3 id="changing-usb-can-device-firmware">Changing USB-CAN device firmware</h3> <p>If your device is compatible with CANable firmware, you can <a href="https://canable.io/updater/">change the frimware</a> to either <code class="language-plaintext highlighter-rouge">candlelight</code> or <code class="language-plaintext highlighter-rouge">slcan</code>. with <code class="language-plaintext highlighter-rouge">candlelight</code> the usb-can device shows up as a native CAN device with SocketCAN and has higher performance than <code class="language-plaintext highlighter-rouge">slcan</code>. However, <code class="language-plaintext highlighter-rouge">candlelight</code> frimware is not compatible with CAN-FD.</p> <p>Most CANable devices come with <code class="language-plaintext highlighter-rouge">slcan</code> firmware, and `slcan enumerates as a serial device with CAN-FD support.</p> <h3 id="option-1-using-candlelight-to-set-up-can-bus">Option 1: Using <code class="language-plaintext highlighter-rouge">candlelight</code> to set up CAN bus</h3> <p>To set the CAN bus to <code class="language-plaintext highlighter-rouge">UP</code> state with 500 kpbs baudrate, run:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo ip link set up can0 type can bitrate 500000
</code></pre></div></div> <p>And you can adjust the baudrate by changing the <code class="language-plaintext highlighter-rouge">bitrate</code> argument.</p> <p>Run <code class="language-plaintext highlighter-rouge">ip link ls</code> to check the status of the CAN bus.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/up-480.webp 480w,/assets/img/can/up-800.webp 800w,/assets/img/can/up-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/up.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="up" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Output of `ip link ls` command. You can see that my SockteCAN device `can0` is at `UP` state. </div> <h3 id="option-2-using-slcan-to-set-up-can-bus">Option 2: Using <code class="language-plaintext highlighter-rouge">slcan</code> to set up CAN bus</h3> <p>check the USB port number of the USB-CAN device by running:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls /dev/ttyACM*
</code></pre></div></div> <p>Then your device may show up as <code class="language-plaintext highlighter-rouge">/dev/ttyACMx</code>. While x is an arbitrary number depending on other USB devices connected to your computer. You can run the following command to load the device (make sure to replace <code class="language-plaintext highlighter-rouge">x</code> with the number you found):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo slcand -o -c -s6 /dev/ttyACMx can0
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">-s6</code> argument determines the baudrate of the CAN bus. The options are:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-s0 = 10k
-s1 = 20k
-s2 = 50k
-s3 = 100k
-s4 = 125k
-s5 = 250k
-s6 = 500k
-s7 = 750k
-s8 = 1M
</code></pre></div></div> <p>Then you can check the status of the CAN bus from <code class="language-plaintext highlighter-rouge">ip link ls</code> command. You should see the <code class="language-plaintext highlighter-rouge">can0</code> device is at <code class="language-plaintext highlighter-rouge">DOWN</code> state.</p> <p>In order to read and write to CAN bus, you have to bring the <code class="language-plaintext highlighter-rouge">can0</code> device <code class="language-plaintext highlighter-rouge">UP</code> state by running:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo ifconfig can0 up
</code></pre></div></div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/up-480.webp 480w,/assets/img/can/up-800.webp 800w,/assets/img/can/up-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/up.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="up" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Output of `ip link ls` command. You can see that my SockteCAN device `can0` is at `UP` state. </div> <blockquote> <p>IMPORTANT: If you unplug the USB-CAN device and plug it back in, your USB port number may change (x in <code class="language-plaintext highlighter-rouge">/dev/ttyACMx</code>). To avoid checking the USB port number every time create a symlink in <code class="language-plaintext highlighter-rouge">/dev</code> using <code class="language-plaintext highlighter-rouge">/etc/udev/rules</code>. To do that you need to know your vendor and product ID of the USB-CAN device.</p> </blockquote> <h4 id="setting-up-udev-rules-to-create-symlink-for-slcan">Setting up udev rules to create symlink for <code class="language-plaintext highlighter-rouge">slcan</code></h4> <p>I am testing this with Makerbase CANable 2.0 USB to CAN adapter. Run the following command to get the vendor and product ID of the USB-CAN device:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lsusb
</code></pre></div></div> <p>then you will see the output like:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>==&gt; Bus 001 Device 042: ID 16d0:117e MCS CANable2 b158aa7 GitHub - normaldotcom/canable2-fw
</code></pre></div></div> <p>16d0 is your ATTRS{idVendor}, and 117e is your ATTRS{idProduct}</p> <p>Now create a new rule by this command:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo nano /etc/udev/rules.d/99-usb-serial.rules
</code></pre></div></div> <p>use 99 ~ 90 to prevent override</p> <p>and add the following to the rules file:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ACTION=="add", SUBSYSTEM=="tty", ATTRS{idVendor}=="16d0", ATTRS{idProduct}=="117e", SYMLINK+="ttycan"
</code></pre></div></div> <p>ctrl + x and y to save and exit. <code class="language-plaintext highlighter-rouge">ttycan</code> can be replaced your desired symlink name (for me, SYMLINK name had to be all lowercase in order to work).</p> <p>reload the udev/rules.d by: <code class="language-plaintext highlighter-rouge">sudo udevadm control --reload-rules</code></p> <p>Unplug and plug back in the USB-CAN module just in case, and run:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls -l /dev/ttycan
</code></pre></div></div> <p>Then it should output:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>==&gt; lrwxrwxrwx 1 root root 7 Sep 12 14:01 /dev/ttycan -&gt; ttyACM5
</code></pre></div></div> <p>You can see that ttycan is linked to ttyACMx Lastly, compare <code class="language-plaintext highlighter-rouge">udevadm info -a /dev/ttyACM5 and udevadm info -a /dev/ttycan</code> to make sure they output the same result.</p> <p>You can now use <code class="language-plaintext highlighter-rouge">/dev/ttycan</code> instead of <code class="language-plaintext highlighter-rouge">/dev/ttyACMx</code> in the <code class="language-plaintext highlighter-rouge">slcand</code> command.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo slcand -o -c -s6 /dev/ttycan can
sudo ip link set up can0 type can
</code></pre></div></div> <p>Netx Post: <a href="/esp32can/">Communicating to ESP32 with SocketCAN</a></p>]]></content><author><name></name></author><category term="Hardware Development"/><summary type="html"><![CDATA[Setting up SocketCAN]]></summary></entry><entry><title type="html">[CAN 01] - What is CAN?</title><link href="https://dokkev.github.io/aboutcan/" rel="alternate" type="text/html" title="[CAN 01] - What is CAN?"/><published>2023-09-01T00:00:00+00:00</published><updated>2023-09-01T00:00:00+00:00</updated><id>https://dokkev.github.io/aboutcan</id><content type="html" xml:base="https://dokkev.github.io/aboutcan/"><![CDATA[<h1 id="introduction">Introduction</h1> <h3 id="what-is-control-area-network-can">What is Control Area Network (CAN)?</h3> <p>CAN is a communication interface widely used in the automotive industry due to its safety and reliability. CAN allows multiple electronic devices such as sensors and motor controllers to communicate in real-time via shared bus in which distributed CAN Nodes communicate through without a “master device”. CAN is a robust communication interface which can tramsits data over a long distance from 40 meters to 1,000 meters depending on the baudrate in hard coniditon subject to noise, interference, temerature, vibration, etc.</p> <h3 id="how-is-it-used-in-robotics">How is it used in Robotics?</h3> <p>In robotics, the Controller Area Network (CAN) is widely adopted for real-time communication between a host computer and motor driver modules. For complex robots like multi-DOF manipulators or legged robots, each motor driver module typically includes a microcontroller running control algorithms, such as Field-Oriented Control (FoC), to accurately control BLDC (Brushless DC) motors. In this setup, the microcontroller in each motor module calculates the PWM (Pulse Width Modulation) signals needed to control motor phases and achieve the desired movements. These PWM signals are then sent to motor drivers, such as the DRV8313, which uses them to drive the motor’s three phases. The control loop for each motor typically runs at a high frequency over 1 kHz, and a lot of motor driver modules such as ODrive, Mjbots, etc. include CAN controller and transceiver to enable the communication between the microcontroller and host computer.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/can-480.webp 480w,/assets/img/can/can-800.webp 800w,/assets/img/can/can-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/can.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="can" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> CAN Bus </div> <p>The CAN bus can also support real-time, high-frequency impedance control by closing the control loop through the CAN bus itself, rather than solely relying on the control loop inside the microcontroller in the driver module. Impedance control plays a crucial role for robots that need to adapt their flexibility when interacting with dynamic environments or external forces. This adaptability is especially valuable for legged robots that frequently make and break contact with the environment. Impedance control allows these robots to safely absorb impact upon contact. Legged robots can navigate challenging terrains, avoid obstacles, and maintain balance by constantly adjusting their feed-forward torque and impedance gains.</p> <p>\(\tau = M(q)\ddot{q} + D(\dot{q}_{d} - \dot{q}) + K(q_{d} - q) + g(q)\)</p> <div class="caption"> Joint Impedance Control Loop where M is the mass matrix, D is the damping matrix, K is the stiffness matrix, and g is the gravity vector with the generalized coordinates q. K and D are the impedance gains which determine the behavior of the joint when external forces are applied. </div> <p>For example, MIT mini cheetah robot uses CAN bus to communicate with the motor driver modules to achieve real-time impedance control.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/mini-cheetah-480.webp 480w,/assets/img/can/mini-cheetah-800.webp 800w,/assets/img/can/mini-cheetah-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/mini-cheetah.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="mini-cheetah" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> MIT Mini Cheetah </div> <p>This awesome open-source quadruped robot’s communication structure have been adopted by many other actuators and robot companies.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/ak10-9-480.webp 480w,/assets/img/can/ak10-9-800.webp 800w,/assets/img/can/ak10-9-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/ak10-9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="ak10-9" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/go1-480.webp 480w,/assets/img/can/go1-800.webp 800w,/assets/img/can/go1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/go1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="go1" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/can/h1-480.webp 480w,/assets/img/can/h1-800.webp 800w,/assets/img/can/h1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/can/h1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="h1" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Robotic Systems with CAN communication Left: CubeMars AK10-9, Middle and Right: Unitree Go1 and H1 </div> <h3 id="limitation-of-can-bus-in-robotics">Limitation of CAN Bus in Robotics</h3> <p>Mini Cheetah has 4 CAN channels while 3 motors are connected to each channel to control total 12 motors. This is one of the limitation of using CAN bus for real-time control robots. The maximum baudrate of CAN bus is 1 Mbps, and the bus can be easily overloaded when the number of motors increases in high control frequency. Assuming the control loop is running at 1 kHz with a tyical non-RTR standard CAN frame with 11 bits of data, the CAN bus is populated with 22,000 bps with command frame and response frame of a single actuator. This is approximately 22.2% of the 1 Mbps CAN bus. Since it’s recommended to keep the CAN bus load less than 70~80%, the maximum number of actuators that can be connected to a single CAN channel is 3. Decreasing the control loop frequencty will reduce the load on the CAN bus, but lower control loop frequency will not only reduce the performance but also increase the instability of the robot.</p>]]></content><author><name></name></author><category term="Hardware Development"/><summary type="html"><![CDATA[What is CAN Bus and how is it used in robotics?]]></summary></entry></feed>